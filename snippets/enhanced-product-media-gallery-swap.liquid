{%- comment -%}
  Enhanced Product Media Gallery v0.8 - AUTO MEDIA SWAPPING
  - Auto-swaps 1st image with 2nd video when video loads
  - Persistent media order during session
  - Perfect variant synchronization
  - User-requested behavior: Video takes priority position
{%- endcomment -%}

<div class="auto-swap-media-gallery" data-product-id="{{ product.id }}">
  <!-- Main Media Display with Auto-Swap Logic -->
  <div class="main-media-container" data-original-order="true">
    {%- assign primary_media = product.selected_or_first_available_variant.featured_media | default: product.featured_media -%}
    
    {%- for media in product.media -%}
      <div 
        class="media-item{% if forloop.first %} active{% endif %}" 
        data-media-index="{{ forloop.index0 }}"
        data-original-index="{{ forloop.index0 }}"
        data-variant-id="{{ media.variant_ids | join: ',' }}"
        data-media-type="{{ media.media_type }}"
        data-media-id="{{ media.id }}"
        style="{% unless forloop.first %}display: none;{% endunless %}">
        
        {%- case media.media_type -%}
          {%- when 'video' -%}
            {%- comment -%} Video with Auto-Swap Detection {%- endcomment -%}
            {%- assign video_resolution = product.metafields.custom.video_resolutions.value[forloop.index0] | default: "1920x1080" -%}
            {%- assign resolution_parts = video_resolution | split: 'x' -%}
            {%- assign video_width = resolution_parts[0] | plus: 0 | default: 1920 -%}
            {%- assign video_height = resolution_parts[1] | plus: 0 | default: 1080 -%}
            {%- assign aspect_ratio = video_width | divided_by: video_height | times: 100.0 | divided_by: 100.0 -%}
            
            <div class="video-container auto-swap-video" 
                 data-resolution="{{ video_resolution }}"
                 data-duration="{{ product.metafields.custom.video_duration_.value[forloop.index0] }}"
                 data-can-swap="{{ forloop.index0 | plus: 1 }}"
                 style="aspect-ratio: {{ aspect_ratio }};">
              
              <video 
                class="direct-video swap-trigger"
                controls 
                preload="metadata"
                playsinline
                data-video-id="{{ media.id }}"
                data-swap-index="{{ forloop.index0 }}"
                poster="{{ media.preview_image | image_url: width: 1200 }}"
                onloadstart="handleVideoLoadStart(this)"
                oncanplay="handleVideoCanPlay(this)"
                onplay="handleVideoPlay(this)">
                <source src="{{ media.sources[0].url }}" type="video/mp4">
                Your browser does not support video playback.
              </video>
              
              {%- comment -%} Video metadata overlay {%- endcomment -%}
              <div class="video-metadata-overlay">
                <span class="swap-indicator" style="display: none;">↑ Moving to Top</span>
                {%- if product.metafields.custom.video_duration_.value[forloop.index0] -%}
                  {%- assign duration_seconds = product.metafields.custom.video_duration_.value[forloop.index0] | plus: 0 -%}
                  <span class="duration-badge">
                    {%- if duration_seconds >= 60 -%}
                      {%- assign minutes = duration_seconds | divided_by: 60 -%}
                      {%- assign seconds = duration_seconds | modulo: 60 -%}
                      {{ minutes }}:{{ seconds | prepend: '0' | slice: -2, 2 }}
                    {%- else -%}
                      0:{{ duration_seconds | prepend: '0' | slice: -2, 2 }}
                    {%- endif -%}
                  </span>
                {%- endif -%}
                
                {%- if video_resolution -%}
                  <span class="resolution-badge">{{ video_resolution | replace: 'x', '×' }}</span>
                {%- endif -%}
              </div>
            </div>
            
          {%- when 'image' -%}
            <div class="image-container auto-swap-image" data-can-demote="{{ forloop.index0 }}">
              <img 
                src="{{ media | image_url: width: 1200 }}"
                alt="{{ media.alt | escape }}"
                loading="lazy"
                data-image-id="{{ media.id }}"
                data-swap-index="{{ forloop.index0 }}"
                class="product-image">
                
              {%- comment -%} Image swap indicator {%- endcomment -%}
              <div class="image-overlay">
                <span class="demote-indicator" style="display: none;">↓ Moving Down</span>
              </div>
            </div>
            
          {%- when 'external_video' -%}
            <div class="external-video-container auto-swap-video"
                 data-can-swap="{{ forloop.index0 | plus: 1 }}">
              {%- if media.host == 'youtube' -%}
                <iframe 
                  src="https://www.youtube.com/embed/{{ media.external_id }}?enablejsapi=1"
                  data-video-id="{{ media.external_id }}"
                  data-swap-index="{{ forloop.index0 }}"
                  onload="handleExternalVideoLoad(this)"
                  class="external-video swap-trigger"
                  allowfullscreen>
                </iframe>
              {%- elsif media.host == 'vimeo' -%}
                <iframe 
                  src="https://player.vimeo.com/video/{{ media.external_id }}"
                  data-video-id="{{ media.external_id }}"
                  data-swap-index="{{ forloop.index0 }}"
                  onload="handleExternalVideoLoad(this)"
                  class="external-video swap-trigger"
                  allowfullscreen>
                </iframe>
              {%- endif -%}
            </div>
        {%- endcase -%}
      </div>
    {%- endfor -%}
  </div>

  <!-- Thumbnail Navigation with Dynamic Order -->
  <div class="thumbnail-navigation auto-swap-thumbs">
    {%- for media in product.media -%}
      <div 
        class="thumbnail-item{% if forloop.first %} active{% endif %}" 
        data-thumb-index="{{ forloop.index0 }}"
        data-original-thumb-index="{{ forloop.index0 }}"
        data-media-type="{{ media.media_type }}"
        onclick="switchToMediaByThumb({{ forloop.index0 }})">
        
        {%- if media.media_type == 'video' -%}
          <img src="{{ media.preview_image | image_url: width: 200 }}" alt="Video thumbnail">
          <div class="play-overlay">▶</div>
        {%- elsif media.media_type == 'image' -%}
          <img src="{{ media | image_url: width: 200 }}" alt="{{ media.alt | escape }}">
        {%- elsif media.media_type == 'external_video' -%}
          <img src="{{ media.preview_image | image_url: width: 200 }}" alt="External video thumbnail">
          <div class="play-overlay">▶</div>
        {%- endif -%}
        
        <div class="swap-badge" style="display: none;">
          <span class="position-indicator">{{ forloop.index }}</span>
        </div>
      </div>
    {%- endfor -%}
  </div>
</div>

<style>
/* Auto-Swap Media Gallery Styles */
.auto-swap-media-gallery {
  width: 100%;
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.main-media-container {
  position: relative;
  width: 100%;
  min-height: 400px;
  background: #f8fafc;
  border-radius: 12px;
  overflow: hidden;
  transition: all 0.3s ease;
}

.main-media-container.swapping {
  transform: scale(0.98);
  box-shadow: 0 0 20px rgba(59, 130, 246, 0.3);
}

.media-item {
  width: 100%;
  height: 100%;
  transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
}

/* Auto-Swap Animation Styles */
.media-item.swapping-out {
  opacity: 0;
  transform: translateY(-20px);
}

.media-item.swapping-in {
  opacity: 0;
  transform: translateY(20px);
  animation: swapIn 0.6s ease forwards 0.3s;
}

@keyframes swapIn {
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Swap Indicators */
.swap-indicator, .demote-indicator {
  position: absolute;
  top: 10px;
  right: 10px;
  background: rgba(59, 130, 246, 0.9);
  color: white;
  padding: 0.5rem 1rem;
  border-radius: 20px;
  font-size: 0.8rem;
  font-weight: 600;
  z-index: 10;
  animation: pulse 1s infinite;
}

.demote-indicator {
  background: rgba(239, 68, 68, 0.9);
}

@keyframes pulse {
  0%, 100% { opacity: 1; }
  50% { opacity: 0.7; }
}

/* Thumbnail Navigation */
.thumbnail-navigation {
  display: flex;
  gap: 0.5rem;
  overflow-x: auto;
  padding: 0.5rem;
  background: #f1f5f9;
  border-radius: 8px;
}

.thumbnail-item {
  position: relative;
  width: 80px;
  height: 60px;
  border-radius: 6px;
  overflow: hidden;
  cursor: pointer;
  transition: all 0.3s ease;
  border: 2px solid transparent;
}

.thumbnail-item.active {
  border-color: #3b82f6;
  transform: scale(1.05);
}

.thumbnail-item img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.play-overlay {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background: rgba(0, 0, 0, 0.7);
  color: white;
  width: 24px;
  height: 24px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 10px;
}

.swap-badge {
  position: absolute;
  top: 2px;
  right: 2px;
  background: #059669;
  color: white;
  border-radius: 50%;
  width: 18px;
  height: 18px;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 10px;
  font-weight: bold;
}

/* Mobile Optimizations */
@media (max-width: 768px) {
  .main-media-container {
    min-height: 300px;
  }
  
  .thumbnail-item {
    width: 60px;
    height: 45px;
  }
}
</style>

<script>
/**
 * AUTO-SWAP MEDIA GALLERY FUNCTIONALITY
 * Implements user-requested behavior: Video auto-moves to first position
 */

document.addEventListener('DOMContentLoaded', function() {
  const gallery = document.querySelector('.auto-swap-media-gallery');
  if (!gallery) return;
  
  console.log('🎥 Auto-Swap Media Gallery Initialized');
  
  // State management
  let currentOrder = [];
  let originalOrder = [];
  let swapInProgress = false;
  let hasSwappedThisSession = false;
  
  // Initialize
  initializeGallery();
  
  function initializeGallery() {
    const mediaItems = gallery.querySelectorAll('.media-item');
    
    // Store original order
    mediaItems.forEach((item, index) => {
      const originalIndex = parseInt(item.dataset.originalIndex);
      originalOrder.push({
        element: item,
        originalIndex: originalIndex,
        mediaType: item.dataset.mediaType,
        mediaId: item.dataset.mediaId
      });
      currentOrder.push(originalIndex);
    });
    
    console.log('📋 Original media order initialized');
  }
});

/**
 * VIDEO LOAD HANDLERS - TRIGGER AUTO-SWAP
 */
function handleVideoLoadStart(videoElement) {
  console.log('🎬 Video load started:', videoElement.dataset.videoId);
}

function handleVideoCanPlay(videoElement) {
  console.log('🎬 Video can play:', videoElement.dataset.videoId);
  
  const swapIndex = parseInt(videoElement.dataset.swapIndex);
  
  // Check if this video should trigger a swap (not already first)
  if (swapIndex > 0) {
    console.log('🔄 Triggering auto-swap for video at index ' + swapIndex);
    scheduleMediaSwap(swapIndex);
  }
}

function handleVideoPlay(videoElement) {
  console.log('▶️ Video started playing:', videoElement.dataset.videoId);
  
  const swapIndex = parseInt(videoElement.dataset.swapIndex);
  if (swapIndex > 0) {
    executeMediaSwap(swapIndex);
  }
}

function handleExternalVideoLoad(iframeElement) {
  console.log('🌐 External video loaded:', iframeElement.dataset.videoId);
  
  const swapIndex = parseInt(iframeElement.dataset.swapIndex);
  if (swapIndex > 0) {
    scheduleMediaSwap(swapIndex);
  }
}

/**
 * MEDIA SWAPPING LOGIC
 */
function scheduleMediaSwap(videoIndex) {
  console.log('⏰ Scheduling media swap for index ' + videoIndex + ' in 2 seconds...');
  
  setTimeout(() => {
    executeMediaSwap(videoIndex);
  }, 2000);
}

function executeMediaSwap(videoIndex) {
  console.log('🔄 Executing media swap: Moving video from index ' + videoIndex + ' to index 0');
  
  const gallery = document.querySelector('.auto-swap-media-gallery');
  const container = gallery.querySelector('.main-media-container');
  const mediaItems = gallery.querySelectorAll('.media-item');
  const thumbnails = gallery.querySelectorAll('.thumbnail-item');
  
  // Add swapping class for animation
  container.classList.add('swapping');
  
  // Phase 1: Hide current media with animation
  mediaItems.forEach(item => {
    if (item.style.display !== 'none') {
      item.classList.add('swapping-out');
    }
  });
  
  setTimeout(() => {
    // Phase 2: Reorder media elements
    reorderMediaElements(videoIndex, mediaItems);
    reorderThumbnailElements(videoIndex, thumbnails);
    
    // Phase 3: Show new first media
    mediaItems[videoIndex].style.display = 'block';
    mediaItems[videoIndex].classList.remove('swapping-out');
    mediaItems[videoIndex].classList.add('swapping-in');
    
    // Update active states
    updateActiveStates(videoIndex);
    
    // Phase 4: Clean up
    setTimeout(() => {
      container.classList.remove('swapping');
      console.log('✅ Media swap completed successfully');
    }, 600);
  }, 300);
}

function reorderMediaElements(videoIndex, mediaItems) {
  const container = mediaItems[0].parentNode;
  const videoElement = mediaItems[videoIndex];
  
  // Move video to first position
  container.insertBefore(videoElement, container.firstChild);
  
  // Hide all other media
  mediaItems.forEach((item, index) => {
    if (index !== videoIndex) {
      item.style.display = 'none';
      item.classList.remove('active');
    }
  });
  
  videoElement.classList.add('active');
}

function reorderThumbnailElements(videoIndex, thumbnails) {
  const container = thumbnails[0].parentNode;
  const videoThumb = thumbnails[videoIndex];
  
  // Move video thumbnail to first position
  container.insertBefore(videoThumb, container.firstChild);
  
  // Update active states
  thumbnails.forEach(thumb => thumb.classList.remove('active'));
  videoThumb.classList.add('active');
}

function updateActiveStates(videoIndex) {
  const gallery = document.querySelector('.auto-swap-media-gallery');
  
  // Update media active states
  gallery.querySelectorAll('.media-item').forEach(item => {
    item.classList.remove('active');
  });
  
  const targetMedia = gallery.querySelector('[data-original-index="' + videoIndex + '"]');
  if (targetMedia) {
    targetMedia.classList.add('active');
  }
}

/**
 * THUMBNAIL CLICK HANDLER
 */
function switchToMediaByThumb(index) {
  console.log('👆 Thumbnail clicked: index ' + index);
  
  const gallery = document.querySelector('.auto-swap-media-gallery');
  const mediaItems = gallery.querySelectorAll('.media-item');
  const thumbnails = gallery.querySelectorAll('.thumbnail-item');
  
  // Hide all media
  mediaItems.forEach(item => {
    item.style.display = 'none';
    item.classList.remove('active');
  });
  
  // Show selected media
  const targetMedia = gallery.querySelector('[data-original-index="' + index + '"]');
  if (targetMedia) {
    targetMedia.style.display = 'block';
    targetMedia.classList.add('active');
  }
  
  // Update thumbnail active states
  thumbnails.forEach(thumb => thumb.classList.remove('active'));
  const targetThumb = gallery.querySelector('[data-original-thumb-index="' + index + '"]');
  if (targetThumb) {
    targetThumb.classList.add('active');
  }
}
</script>