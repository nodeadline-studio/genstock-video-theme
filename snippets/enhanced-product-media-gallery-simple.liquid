{% comment %}
  Enhanced Product Media Gallery v0.8 - DIRECT VIDEO PLAYBACK - PRODUCTION READY
  - No placeholder images - direct video display
  - Dynamic aspect ratio based on video resolution
  - Perfect variant synchronization
  - Fixed video timing and preview issues
  - Professional UI design
{% endcomment %}

<div class="direct-media-gallery" data-product-id="{{ product.id }}">
  <!-- Main Media Display -->
  <div class="main-media-container" data-media-index="0">
    {%- assign primary_media = product.selected_or_first_available_variant.featured_media | default: product.featured_media -%}
    
    {%- for media in product.media -%}
      <div 
        class="media-item{% if forloop.first %} active{% endif %}" 
        data-media-index="{{ forloop.index0 }}"
        data-variant-id="{{ media.variant_ids | join: ',' }}"
        data-media-type="{{ media.media_type }}"
        style="{% unless forloop.first %}display: none;{% endunless %}">
        
        {%- case media.media_type -%}
          {%- when 'video' -%}
            {%- comment -%} Direct video display with dynamic sizing {%- endcomment -%}
            {%- assign video_resolution = product.metafields.custom.video_resolutions.value[forloop.index0] | default: "1920x1080" -%}
            {%- assign resolution_parts = video_resolution | split: 'x' -%}
            {%- assign video_width = resolution_parts[0] | plus: 0 | default: 1920 -%}
            {%- assign video_height = resolution_parts[1] | plus: 0 | default: 1080 -%}
            {%- assign aspect_ratio = video_width | divided_by: video_height | times: 100.0 | divided_by: 100.0 -%}
            
            <div class="video-container" 
                 data-resolution="{{ video_resolution }}"
                 data-duration="{{ product.metafields.custom.video_duration_.value[forloop.index0] }}"
                 style="aspect-ratio: {{ aspect_ratio }};">
              
              <video 
                class="direct-video"
                controls 
                preload="metadata"
                playsinline
                data-video-id="{{ media.id }}"
                poster="{{ media.preview_image | image_url: width: 1200 }}">
                <source src="{{ media.sources[0].url }}" type="video/mp4">
                Your browser does not support video playback.
              </video>
              
              {%- comment -%} Video metadata overlay {%- endcomment -%}
              <div class="video-metadata-overlay">
                {%- if product.metafields.custom.video_duration_.value[forloop.index0] -%}
                  {%- assign duration_seconds = product.metafields.custom.video_duration_.value[forloop.index0] | plus: 0 -%}
                  <span class="duration-badge">
                    {%- if duration_seconds >= 60 -%}
                      {%- assign minutes = duration_seconds | divided_by: 60 -%}
                      {%- assign seconds = duration_seconds | modulo: 60 -%}
                      {{ minutes }}:{{ seconds | prepend: '0' | slice: -2, 2 }}
                    {%- else -%}
                      0:{{ duration_seconds | prepend: '0' | slice: -2, 2 }}
                    {%- endif -%}
                  </span>
                {%- endif -%}
                
                {%- if video_resolution -%}
                  <span class="resolution-badge">{{ video_resolution | replace: 'x', 'Ã—' }}</span>
                {%- endif -%}
              </div>
            </div>
            
          {%- when 'image' -%}
            <div class="image-container">
              <img 
                src="{{ media | image_url: width: 1200 }}"
                alt="{{ media.alt | escape }}"
                loading="lazy"
                class="product-image">
            </div>
            
          {%- else -%}
            <div class="media-container">
              {{ media | media_tag: loading: 'lazy' }}
            </div>
        {%- endcase -%}
      </div>
    {%- endfor -%}
  </div>

  <!-- Enhanced Thumbnails Row -->
  {%- if product.media.size > 1 -%}
    <div class="thumbnails-container">
      <div class="thumbnails-row">
        {%- for media in product.media -%}
          <button 
            class="thumbnail-item{% if forloop.first %} active{% endif %}"
            data-media-index="{{ forloop.index0 }}"
            data-variant-id="{{ media.variant_ids | join: ',' }}"
            data-media-type="{{ media.media_type }}"
            aria-label="View {{ media.media_type | capitalize }} {{ forloop.index }}">
            
            <div class="thumbnail-content">
              {%- case media.media_type -%}
                {%- when 'video' -%}
                  <img 
                    src="{{ media.preview_image | image_url: width: 150 }}" 
                    alt="{{ media.alt | escape }}"
                    loading="lazy"
                    class="thumbnail-image">
                  <div class="media-type-indicator video-indicator">
                    <svg width="12" height="12" viewBox="0 0 12 12" fill="white">
                      <polygon points="3,2 3,10 9,6" fill="currentColor"/>
                    </svg>
                  </div>
                  
                {%- when 'image' -%}
                  <img 
                    src="{{ media | image_url: width: 150 }}" 
                    alt="{{ media.alt | escape }}"
                    loading="lazy"
                    class="thumbnail-image">
                  <div class="media-type-indicator image-indicator">
                    <svg width="12" height="12" viewBox="0 0 12 12" fill="white">
                      <rect x="2" y="3" width="8" height="6" rx="1" fill="none" stroke="currentColor"/>
                      <circle cx="5" cy="5.5" r="1" fill="currentColor"/>
                    </svg>
                  </div>
                  
                {%- else -%}
                  {{ media | image_url: width: 150 | image_tag: loading: 'lazy', class: 'thumbnail-image' }}
              {%- endcase -%}
            </div>
            
            {%- comment -%} Thumbnail metadata {%- endcomment -%}
            {%- if media.media_type == 'video' and product.metafields.custom.video_duration_.value[forloop.index0] -%}
              {%- assign duration_seconds = product.metafields.custom.video_duration_.value[forloop.index0] | plus: 0 -%}
              <div class="thumbnail-duration">
                {%- if duration_seconds >= 60 -%}
                  {%- assign minutes = duration_seconds | divided_by: 60 -%}
                  {%- assign seconds = duration_seconds | modulo: 60 -%}
                  {{ minutes }}:{{ seconds | prepend: '0' | slice: -2, 2 }}
                {%- else -%}
                  0:{{ duration_seconds | prepend: '0' | slice: -2, 2 }}
                {%- endif -%}
              </div>
            {%- endif -%}
          </button>
        {%- endfor -%}
      </div>
    </div>
  {%- endif -%}
</div>

<style>
/* ENHANCED MEDIA GALLERY v0.8 - PROFESSIONAL VIDEO STORE 2025 */
.direct-media-gallery {
  width: 100%;
  background: #ffffff;
  border-radius: 16px;
  overflow: hidden;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
  border: 1px solid #e5e7eb;
}

.main-media-container {
  position: relative;
  width: 100%;
  min-height: 300px;
  background: #f8fafc;
}

.media-item {
  position: relative;
  width: 100%;
  height: 100%;
}

/* Video Container - Responsive Aspect Ratios */
.video-container {
  position: relative;
  width: 100%;
  background: #000000;
  border-radius: 12px;
  overflow: hidden;
  margin: 1rem;
  /* Dynamic aspect ratio set via inline style */
}

.direct-video {
  width: 100%;
  height: 100%;
  object-fit: contain; /* Maintain aspect ratio without cropping */
  background: #000000;
  border-radius: 8px;
}

/* Video Metadata Overlay */
.video-metadata-overlay {
  position: absolute;
  top: 12px;
  right: 12px;
  display: flex;
  gap: 8px;
  z-index: 10;
}

.duration-badge,
.resolution-badge {
  background: rgba(0, 0, 0, 0.8);
  color: white;
  padding: 4px 8px;
  border-radius: 6px;
  font-size: 0.75rem;
  font-weight: 600;
  backdrop-filter: blur(4px);
}

.duration-badge {
  background: rgba(59, 130, 246, 0.9);
}

.resolution-badge {
  background: rgba(16, 185, 129, 0.9);
}

/* Image Container */
.image-container {
  position: relative;
  width: 100%;
  margin: 1rem;
}

.product-image {
  width: 100%;
  height: auto;
  object-fit: cover;
  border-radius: 8px;
}

/* Thumbnails Section */
.thumbnails-container {
  padding: 1rem;
  background: #f9fafb;
  border-top: 1px solid #e5e7eb;
}

.thumbnails-row {
  display: flex;
  gap: 0.75rem;
  overflow-x: auto;
  padding: 0.5rem;
  scrollbar-width: thin;
  scrollbar-color: #cbd5e1 #f1f5f9;
}

.thumbnails-row::-webkit-scrollbar {
  height: 6px;
}

.thumbnails-row::-webkit-scrollbar-track {
  background: #f1f5f9;
  border-radius: 3px;
}

.thumbnails-row::-webkit-scrollbar-thumb {
  background: #cbd5e1;
  border-radius: 3px;
}

.thumbnail-item {
  position: relative;
  flex: 0 0 auto;
  width: 100px;
  height: 100px;
  border: 2px solid transparent;
  border-radius: 12px;
  overflow: hidden;
  cursor: pointer;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  background: #ffffff;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

/* Responsive thumbnail sizes */
@media (min-width: 990px) {
  .thumbnail-item {
    width: 100px;
    height: 100px;
  }
}

@media (min-width: 750px) and (max-width: 989px) {
  .thumbnail-item {
    width: 80px;
    height: 80px;
  }
}

.thumbnail-item:hover {
  transform: scale(1.05);
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15);
}

.thumbnail-item.active {
  border-color: #3b82f6;
  box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.2);
}

.thumbnail-content {
  position: relative;
  width: 100%;
  height: 100%;
}

.thumbnail-image {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.media-type-indicator {
  position: absolute;
  top: 4px;
  right: 4px;
  width: 20px;
  height: 20px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  backdrop-filter: blur(4px);
}

.video-indicator {
  background: rgba(59, 130, 246, 0.9);
}

.image-indicator {
  background: rgba(16, 185, 129, 0.9);
}

.thumbnail-duration {
  position: absolute;
  bottom: 2px;
  right: 2px;
  background: rgba(0, 0, 0, 0.8);
  color: white;
  font-size: 0.625rem;
  padding: 2px 4px;
  border-radius: 3px;
  font-weight: 600;
}

/* Responsive Design */
@media (max-width: 768px) {
  .direct-media-gallery {
    border-radius: 8px;
  }
  
  .video-container,
  .image-container {
    margin: 0.5rem;
  }
  
  .direct-video {
    border-radius: 6px;
  }
  
  .thumbnail-item {
    width: 80px;
    height: 80px;
  }
  
  .thumbnails-container {
    padding: 0.75rem;
  }
}

@media (max-width: 480px) {
  .thumbnail-item {
    width: 70px;
    height: 70px;
  }
  
  .thumbnails-row {
    gap: 0.5rem;
  }
}

/* Professional Loading States */
.media-item:not(.active) {
  display: none;
}

.direct-video:not([data-loaded]) {
  background: linear-gradient(45deg, #f3f4f6 25%, transparent 25%), 
              linear-gradient(-45deg, #f3f4f6 25%, transparent 25%), 
              linear-gradient(45deg, transparent 75%, #f3f4f6 75%), 
              linear-gradient(-45deg, transparent 75%, #f3f4f6 75%);
  background-size: 20px 20px;
  background-position: 0 0, 0 10px, 10px -10px, -10px 0px;
  animation: loading-shimmer 2s linear infinite;
}

@keyframes loading-shimmer {
  0% { background-position: 0 0, 0 10px, 10px -10px, -10px 0px; }
  100% { background-position: 20px 20px, 20px 30px, 30px 10px, 10px 20px; }
}
</style>

<script>
// Enhanced Media Gallery JavaScript v0.8
(function() {
  'use strict';
  
  const gallery = document.querySelector('.direct-media-gallery');
  if (!gallery) return;
  
  const mainContainer = gallery.querySelector('.main-media-container');
  const thumbnails = gallery.querySelectorAll('.thumbnail-item');
  const mediaItems = gallery.querySelectorAll('.media-item');
  
  // Initialize gallery
  function initGallery() {
    // Add click handlers to thumbnails
    thumbnails.forEach((thumbnail, index) => {
      thumbnail.addEventListener('click', (e) => {
        e.preventDefault();
        switchToMedia(index);
        
        // Provide visual feedback
        thumbnail.style.transform = 'scale(0.95)';
        setTimeout(() => {
          thumbnail.style.transform = '';
        }, 150);
      });
    });
    
    // Initialize videos
    initializeVideos();
    
    // Handle variant changes - listen to both events
    document.addEventListener('variant:change', handleVariantChange);
    document.addEventListener('gallery:variant-change', handleVariantChange);
  }
  
  function switchToMedia(index) {
    // Update active states
    mediaItems.forEach((item, i) => {
      item.style.display = i === index ? 'block' : 'none';
      item.classList.toggle('active', i === index);
    });
    
    thumbnails.forEach((thumb, i) => {
      thumb.classList.toggle('active', i === index);
    });
    
    // Update main container
    mainContainer.setAttribute('data-media-index', index);
    
    // Handle video playback
    const activeMedia = mediaItems[index];
    const video = activeMedia?.querySelector('.direct-video');
    
    if (video) {
      // Pause other videos
      mediaItems.forEach((item, i) => {
        if (i !== index) {
          const otherVideo = item.querySelector('.direct-video');
          if (otherVideo && !otherVideo.paused) {
            otherVideo.pause();
          }
        }
      });
      
      // Load video if not already loaded
      if (!video.hasAttribute('data-loaded')) {
        video.load();
        video.setAttribute('data-loaded', 'true');
      }
    }
  }
  
  function initializeVideos() {
    const videos = gallery.querySelectorAll('.direct-video');
    videos.forEach(video => {
      // Add loading event listeners
      video.addEventListener('loadstart', () => {
        video.style.opacity = '0.7';
      });
      
      video.addEventListener('canplay', () => {
        video.style.opacity = '1';
        video.setAttribute('data-loaded', 'true');
      });
      
      video.addEventListener('error', () => {
        console.warn('Video failed to load:', video.src);
        video.style.opacity = '0.5';
      });
    });
  }
  
  function handleVariantChange(event) {
    let variantId = null;
    
    // Handle different event types
    if (event.detail?.variant) {
      variantId = event.detail.variant.id.toString();
    } else if (event.detail?.variantId) {
      variantId = event.detail.variantId.toString();
    }
    
    if (!variantId) return;
    
    console.log('ðŸŽ¬ Gallery handling variant change:', variantId);
    
    // Find media associated with this variant
    const variantMedia = Array.from(mediaItems).find(item => {
      const variantIds = item.getAttribute('data-variant-id')?.split(',') || [];
      return variantIds.includes(variantId);
    });
    
    if (variantMedia) {
      const mediaIndex = parseInt(variantMedia.getAttribute('data-media-index'));
      console.log('ðŸŽ¬ Switching to media index:', mediaIndex);
      switchToMedia(mediaIndex);
    } else {
      // If no specific media for variant, show featured media
      const featuredMedia = mediaItems[0];
      if (featuredMedia) {
        console.log('ðŸŽ¬ No variant-specific media, showing featured');
        switchToMedia(0);
      }
    }
  }
  
  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initGallery);
  } else {
    initGallery();
  }
})();
</script>
