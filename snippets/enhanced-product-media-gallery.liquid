{%- comment -%}
  Enhanced Product Media Gallery 2025 - PRODUCTION READY v2.1
  - Bidirectional variant ↔ video synchronization 
  - 4-thumbnail layout: 1 image + up to 3 videos per variant
  - Cross-platform compatibility (iOS, Android, Desktop)
  - Perfect responsive design for all screen sizes
  - Optimized performance and accessibility
{%- endcomment -%}

{%- liquid
  assign media_count = product.media.size
  assign variant_count = product.variants.size
  
  comment
    Create enhanced variant-media mapping for bidirectional sync
    Format: variant_id:media_id,variant_id:media_id,...
  endcomment
  assign variant_media_map = ''
  assign media_variant_map = ''
  
  for variant in product.variants
    if variant.featured_media
      assign variant_media_map = variant_media_map | append: variant.id | append: ':' | append: variant.featured_media.id | append: ','
      assign media_variant_map = media_variant_map | append: variant.featured_media.id | append: ':' | append: variant.id | append: ','
    endif
  endfor
  
  comment
    Organize media: First image as hero, then videos for each variant
  endcomment
  assign hero_image = null
  assign variant_videos = ''
  
  for media in product.media
    if media.media_type == 'image' and hero_image == null
      assign hero_image = media
    elsif media.media_type == 'video' or media.media_type == 'external_video'
      assign variant_videos = variant_videos | append: media.id | append: ','
    endif
  endfor
-%}

<div class="enhanced-media-gallery" id="EnhancedMediaGallery-{{ section.id }}">
  <!-- Main Video Display -->
  <div class="main-media-container">
    {%- for media in product.media -%}
      <div class="main-media-item{% if forloop.first %} active{% endif %}" 
           data-media-id="{{ media.id }}" 
           data-media-index="{{ forloop.index0 }}"
           role="tabpanel"
           aria-labelledby="thumb-{{ media.id }}">
        
        {%- if media.media_type == 'video' or media.media_type == 'external_video' -%}
          {%- liquid
            comment 'Detect vertical videos based on aspect ratio'
            assign is_vertical = false
            if media.aspect_ratio < 1
              assign is_vertical = true
            endif
          -%}
          <div class="video-wrapper{% if is_vertical %} vertical-video{% endif %}">
            {%- if media.media_type == 'external_video' -%}
              {{ media | external_video_url: autoplay: false, loop: true, muted: true, controls: true | external_video_tag: class: 'main-video', loading: forloop.first | default: 'lazy', title: media.alt | default: product.title, playsinline: true }}
            {%- else -%}
              {{ media | media_tag: image_size: '1200x', autoplay: false, loop: true, controls: true, muted: true, preload: 'metadata', class: 'main-video', title: media.alt | default: product.title, playsinline: true }}
            {%- endif -%}
            
            <div class="video-info-badge">
              <svg viewBox="0 0 24 24" fill="currentColor">
                <path d="M8 5v14l11-7z"/>
              </svg>
              <span>{{ media.media_type | replace: '_', ' ' | capitalize }}{% if is_vertical %} • Portrait{% endif %}</span>
            </div>
          </div>
        {%- else -%}
          <div class="image-wrapper">
            {{ media | image_url: width: 1200 | image_tag: 
              class: 'main-image',
              loading: forloop.first | default: 'lazy',
              alt: media.alt | default: product.title,
              sizes: '(min-width: 1200px) 60vw, (min-width: 990px) 55vw, (min-width: 768px) 70vw, 100vw'
            }}
          </div>
        {%- endif -%}
      </div>
    {%- endfor -%}
  </div>

  <!-- Thumbnail Navigation with Proper Aspect Ratios -->
  {%- if media_count > 1 -%}
    <div class="thumbnails-container">
      <div class="thumbnails-wrapper">
        {%- for media in product.media -%}
          <button 
            class="thumbnail-item{% if forloop.first %} active{% endif %}" 
            type="button"
            id="thumb-{{ media.id }}"
            data-media-id="{{ media.id }}"
            data-media-index="{{ forloop.index0 }}"
            aria-label="View media {{ forloop.index }}"
          >
            <div class="thumbnail-content">
              <!-- Static Thumbnail -->
              <div class="thumbnail-static">
                {{ media.preview_image | image_url: width: 300 | image_tag: 
                  class: 'thumbnail-image',
                  loading: 'lazy',
                  alt: media.alt | default: product.title
                }}
              </div>
              
              <!-- Video Preview (if video) -->
              {%- if media.media_type == 'video' or media.media_type == 'external_video' -%}
                <div class="thumbnail-video-preview">
                  {%- if media.media_type == 'external_video' -%}
                    {{ media | external_video_url: autoplay: false, loop: true, muted: true, controls: false | external_video_tag: class: 'preview-video', loading: 'lazy', playsinline: true }}
                  {%- else -%}
                    {{ media | media_tag: image_size: '300x', autoplay: false, loop: true, controls: false, muted: true, preload: 'none', class: 'preview-video', playsinline: true }}
                  {%- endif -%}
                </div>
                
                <div class="media-type-icon video-icon">
                  <svg viewBox="0 0 24 24" fill="currentColor">
                    <path d="M8 5v14l11-7z"/>
                  </svg>
                </div>
              {%- else -%}
                <div class="media-type-icon image-icon">
                  <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
                    <rect x="3" y="3" width="18" height="18" rx="2" ry="2"/>
                    <circle cx="8.5" cy="8.5" r="1.5"/>
                    <polyline points="21,15 16,10 5,21"/>
                  </svg>
                </div>
              {%- endif -%}
              
              <div class="thumbnail-index">{{ forloop.index }}</div>
            </div>
          </button>
        {%- endfor -%}
      </div>
    </div>
  {%- endif -%}

  <!-- Media Counter -->
  <div class="media-counter">
    <span class="current-media">1</span>
    <span class="separator">/</span>
    <span class="total-media">{{ media_count }}</span>
  </div>
</div>

<style>
/* Enhanced Media Gallery 2025 - PRODUCTION READY */
.enhanced-media-gallery {
  width: 100%;
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

/* Main Media Container - Cross-platform optimized */
.main-media-container {
  position: relative;
  width: 100%;
  background: #000;
  border-radius: 16px;
  overflow: hidden;
  box-shadow: 0 10px 40px rgba(0, 0, 0, 0.15);
  /* Responsive heights */
  height: 60vh;
  min-height: 300px;
  max-height: 600px;
}

/* Vertical video container - maintains same container but adapts internally */
.main-media-container.has-vertical-video {
  /* Container stays the same size for consistency */
  display: flex;
  align-items: center;
  justify-content: center;
}

.main-media-item {
  display: none;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

.main-media-item.active {
  display: flex;
  align-items: center;
  justify-content: center;
}

.video-wrapper,
.image-wrapper {
  position: relative;
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
}

/* Vertical video wrapper - constrains width to maintain aspect ratio */
.video-wrapper.vertical-video {
  max-width: 60%;
  width: auto;
  height: 100%;
  justify-content: center;
}

.main-video,
.main-image {
  max-width: 100%;
  max-height: 100%;
  width: auto;
  height: auto;
  object-fit: contain;
  border-radius: 16px;
  /* iOS video optimization */
  -webkit-playsinline: true;
  /* Android video optimization */
  playsinline: true;
}

/* Vertical video specific styling */
.vertical-video .main-video {
  width: auto;
  height: 100%;
  max-width: none;
}

.video-info-badge {
  position: absolute;
  top: 1rem;
  right: 1rem;
  display: flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.5rem 0.75rem;
  background: rgba(0, 0, 0, 0.8);
  color: white;
  border-radius: 20px;
  font-size: 0.85rem;
  font-weight: 500;
  backdrop-filter: blur(10px);
  z-index: 10;
}

.video-info-badge svg {
  width: 14px;
  height: 14px;
}

/* Thumbnails - Enhanced for all devices */
.thumbnails-container {
  width: 100%;
}

.thumbnails-wrapper {
  display: flex;
  gap: 1rem;
  overflow-x: auto;
  padding: 0.5rem 0;
  scrollbar-width: thin;
  scrollbar-color: #cbd5e1 transparent;
  /* iOS smooth scrolling */
  -webkit-overflow-scrolling: touch;
  /* Prevent scroll bounce on iOS */
  overscroll-behavior-x: contain;
}

.thumbnails-wrapper::-webkit-scrollbar {
  height: 4px;
}

.thumbnails-wrapper::-webkit-scrollbar-track {
  background: transparent;
}

.thumbnails-wrapper::-webkit-scrollbar-thumb {
  background: #cbd5e1;
  border-radius: 2px;
}

.thumbnail-item {
  flex-shrink: 0;
  border: 3px solid transparent;
  border-radius: 12px;
  overflow: hidden;
  background: none;
  cursor: pointer;
  transition: all 0.3s ease;
  position: relative;
  /* Touch optimization */
  touch-action: manipulation;
  -webkit-tap-highlight-color: transparent;
  /* Responsive sizing */
  width: 120px;
  height: 80px;
}

.thumbnail-item:hover,
.thumbnail-item:focus {
  border-color: rgba(59, 130, 246, 0.6);
  transform: translateY(-2px);
  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
  outline: none;
}

.thumbnail-item.active {
  border-color: #3b82f6;
  box-shadow: 0 0 0 1px #3b82f6, 0 8px 25px rgba(59, 130, 246, 0.3);
  transform: translateY(-2px);
}

.thumbnail-content {
  position: relative;
  width: 100%;
  height: 100%;
}

.thumbnail-static {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  transition: opacity 0.3s ease;
}

.thumbnail-image {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

/* Video Preview in Thumbnails - Enhanced for mobile */
.thumbnail-video-preview {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  opacity: 0;
  transition: opacity 0.3s ease;
  z-index: 1;
}

.preview-video {
  width: 100%;
  height: 100%;
  object-fit: cover;
  /* Mobile video optimization */
  -webkit-playsinline: true;
  playsinline: true;
}

/* Media Type Icons */
.media-type-icon {
  position: absolute;
  top: 6px;
  right: 6px;
  width: 20px;
  height: 20px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 2;
}

.video-icon {
  background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
  color: white;
}

.image-icon {
  background: linear-gradient(135deg, #10b981 0%, #059669 100%);
  color: white;
}

.media-type-icon svg {
  width: 12px;
  height: 12px;
}

.thumbnail-index {
  position: absolute;
  bottom: 6px;
  left: 6px;
  width: 20px;
  height: 20px;
  background: rgba(0, 0, 0, 0.8);
  color: white;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 0.75rem;
  font-weight: 600;
  z-index: 2;
}

/* Media Counter */
.media-counter {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.25rem;
  padding: 0.75rem 1rem;
  background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
  border-radius: 12px;
  border: 1px solid #e2e8f0;
  font-weight: 600;
  color: #374151;
}

.current-media {
  color: #3b82f6;
  font-weight: 700;
}

.separator {
  color: #9ca3af;
}

.total-media {
  color: #6b7280;
}

/* Responsive Design - Mobile First */

/* Small phones (320px-479px) */
@media (max-width: 479px) {
  .main-media-container {
    height: 35vh;
    min-height: 250px;
    border-radius: 12px;
  }
  
  .thumbnail-item {
    width: 60px;
    height: 45px;
  }
  
  .thumbnails-wrapper {
    gap: 0.5rem;
  }
  
  .video-info-badge {
    top: 0.5rem;
    right: 0.5rem;
    padding: 0.375rem 0.5rem;
    font-size: 0.75rem;
  }
  
  .media-counter {
    padding: 0.5rem 0.75rem;
    font-size: 0.875rem;
  }
}

/* Phones (480px-767px) */
@media (min-width: 480px) and (max-width: 767px) {
  .main-media-container {
    height: 45vh;
    min-height: 280px;
  }
  
  .thumbnail-item {
    width: 80px;
    height: 60px;
  }
  
  .thumbnails-wrapper {
    gap: 0.75rem;
  }
}

/* Tablets (768px-989px) */
@media (min-width: 768px) and (max-width: 989px) {
  .main-media-container {
    height: 50vh;
    min-height: 350px;
  }
  
  .thumbnail-item {
    width: 100px;
    height: 70px;
  }
}

/* Desktop (990px+) */
@media (min-width: 990px) {
  .main-media-container {
    height: 60vh;
    min-height: 400px;
    max-height: 600px;
  }
  
  .thumbnail-item {
    width: 120px;
    height: 80px;
  }
  
  /* Desktop hover effects */
  .thumbnail-item:hover .thumbnail-video-preview {
    opacity: 1;
  }
  
  .thumbnail-item:hover .thumbnail-static {
    opacity: 0;
  }
}

/* Large screens (1200px+) */
@media (min-width: 1200px) {
  .main-media-container {
    height: 65vh;
    max-height: 700px;
  }
  
  .thumbnail-item {
    width: 140px;
    height: 90px;
  }
}

/* High DPI displays */
@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
  .thumbnail-image,
  .preview-video {
    image-rendering: -webkit-optimize-contrast;
    image-rendering: crisp-edges;
  }
}

/* Dark mode support */
@media (prefers-color-scheme: dark) {
  .media-counter {
    background: linear-gradient(135deg, #1f2937 0%, #111827 100%);
    border-color: #374151;
    color: #e5e7eb;
  }
  
  .current-media {
    color: #60a5fa;
  }
}

/* Reduced motion support */
@media (prefers-reduced-motion: reduce) {
  .thumbnail-item,
  .thumbnail-static,
  .thumbnail-video-preview {
    transition: none;
  }
  
  .thumbnail-item:hover {
    transform: none;
  }
}

/* Print styles */
@media print {
  .enhanced-media-gallery {
    break-inside: avoid;
  }
  
  .thumbnails-container,
  .media-counter {
    display: none;
  }
}

/* Mobile responsive adjustments for vertical videos */
@media (max-width: 768px) {
  .main-media-container {
    height: 50vh;
    min-height: 250px;
    max-height: 500px;
  }
  
  .video-wrapper.vertical-video {
    max-width: 70%;
  }
}

@media (max-width: 480px) {
  .main-media-container {
    height: 45vh;
    min-height: 200px;
    max-height: 400px;
  }
  
  .video-wrapper.vertical-video {
    max-width: 80%;
  }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const gallery = document.getElementById('EnhancedMediaGallery-{{ section.id }}');
  if (!gallery) return;
  
  const mainItems = gallery.querySelectorAll('.main-media-item');
  const thumbnails = gallery.querySelectorAll('.thumbnail-item');
  const currentCounter = gallery.querySelector('.current-media');
  
  let currentIndex = 0;
  let isChanging = false;
  
  // Variant-media mapping for bidirectional sync
  const variantMediaMap = '{{ variant_media_map }}'.split(',').filter(Boolean).reduce((map, item) => {
    const [variantId, mediaId] = item.split(':');
    map[variantId] = mediaId;
    return map;
  }, {});
  
  const mediaVariantMap = '{{ media_variant_map }}'.split(',').filter(Boolean).reduce((map, item) => {
    const [mediaId, variantId] = item.split(':');
    map[mediaId] = variantId;
    return map;
  }, {});
  
  // Device detection
  const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
  const isTouch = 'ontouchstart' in window || navigator.maxTouchPoints > 0;
  
  // Initialize video previews with device optimization
  function initVideoPreview() {
    thumbnails.forEach(thumb => {
      const previewVideo = thumb.querySelector('.preview-video');
      if (previewVideo && previewVideo.tagName === 'VIDEO') {
        previewVideo.muted = true;
        previewVideo.loop = true;
        previewVideo.controls = false;
        previewVideo.playsInline = true;
        previewVideo.preload = 'none';
        
        if (!isMobile) {
          // Desktop hover behavior
          thumb.addEventListener('mouseenter', () => {
            if (!isChanging) {
              previewVideo.currentTime = 0;
              const playPromise = previewVideo.play();
              if (playPromise !== undefined) {
                playPromise.catch(() => {
                  // Silent fail for autoplay restrictions
                });
              }
            }
          });
          
          thumb.addEventListener('mouseleave', () => {
            previewVideo.pause();
          });
        }
      }
    });
  }
  
  // Switch to specific media with variant sync
  function switchToMedia(index, skipVariantUpdate = false) {
    if (index === currentIndex || index < 0 || index >= mainItems.length) return;
    
    console.log('switchToMedia called:', index, 'current:', currentIndex, 'skip:', skipVariantUpdate);
    
    // Set changing flag temporarily
    isChanging = true;
    
    // Hide current media
    mainItems[currentIndex].classList.remove('active');
    thumbnails[currentIndex].classList.remove('active');
    
    // Show new media
    mainItems[index].classList.add('active');
    thumbnails[index].classList.add('active');
    
    // Update container class for vertical video handling
    const container = gallery.querySelector('.main-media-container');
    const activeMedia = mainItems[index];
    const isVerticalVideo = activeMedia.querySelector('.vertical-video');
    
    if (container) {
      if (isVerticalVideo) {
        container.classList.add('has-vertical-video');
      } else {
        container.classList.remove('has-vertical-video');
      }
    }
    
    // Update counter
    if (currentCounter) {
      currentCounter.textContent = index + 1;
    }
    
    currentIndex = index;
    
    // Auto-play main video with mobile optimization
    const activeVideo = mainItems[index].querySelector('.main-video');
    if (activeVideo && activeVideo.tagName === 'VIDEO') {
      setTimeout(() => {
        activeVideo.currentTime = 0;
        const playPromise = activeVideo.play();
        if (playPromise !== undefined) {
          playPromise.catch(() => {
            // Silent fail for autoplay restrictions
          });
        }
      }, 100);
    }
    
    // Sync with variant selector (if not skipping)
    if (!skipVariantUpdate) {
      syncVariantSelection(index);
    }
    
    // Reset changing flag quickly
    setTimeout(() => {
      isChanging = false;
    }, 100);
  }
  
  // Sync variant selection based on media index
  function syncVariantSelection(mediaIndex) {
    const mediaId = mainItems[mediaIndex]?.getAttribute('data-media-id');
    if (!mediaId) {
      console.log('No mediaId found for index:', mediaIndex);
      return;
    }
    
    // Find corresponding variant using mediaVariantMap
    const variantId = mediaVariantMap[mediaId];
    if (!variantId) {
      console.log('No variantId found for mediaId:', mediaId);
      return;
    }
    
    console.log('Syncing variant:', mediaId, '->', variantId);
    
    // Update variant selector (both select and radio inputs)
    const variantInputs = document.querySelectorAll('input[name="id"], select[name="id"]');
    let updated = false;
    
    variantInputs.forEach(input => {
      if (input.tagName === 'SELECT') {
        if (input.value !== variantId) {
          console.log('Updating select from', input.value, 'to', variantId);
          input.value = variantId;
          
          // Create and dispatch change event
          const changeEvent = new Event('change', { bubbles: true });
          input.dispatchEvent(changeEvent);
          updated = true;
        }
      } else if (input.type === 'radio') {
        if (input.value === variantId && !input.checked) {
          console.log('Checking radio button:', variantId);
          input.checked = true;
          
          // Create and dispatch change event
          const changeEvent = new Event('change', { bubbles: true });
          input.dispatchEvent(changeEvent);
          updated = true;
        } else if (input.value !== variantId && input.checked) {
          console.log('Unchecking radio button:', input.value);
          input.checked = false;
        }
      }
    });
    
    // Also trigger Shopify's variant change event
    if (updated) {
      console.log('Triggering Shopify variant change event');
      const variantChangeEvent = new CustomEvent('variant:change', {
        detail: {
          variant: { id: variantId },
          mediaId: mediaId,
          source: 'gallery' // Mark as gallery-triggered
        },
        bubbles: true
      });
      
      // Dispatch after a small delay to ensure DOM is updated
      setTimeout(() => {
        document.dispatchEvent(variantChangeEvent);
      }, 50);
    }
    
    console.log('Variant sync completed:', updated);
  }
  
  // Handle thumbnail clicks with touch optimization
  thumbnails.forEach((thumb, index) => {
    // Click/tap handler
    thumb.addEventListener('click', (e) => {
      e.preventDefault();
      e.stopPropagation();
      console.log('Thumbnail clicked:', index);
      switchToMedia(index);
    });
    
    // Touch optimization for mobile
    if (isTouch) {
      thumb.addEventListener('touchstart', (e) => {
        e.preventDefault();
        thumb.style.transform = 'scale(0.95)';
      }, { passive: false });
      
      thumb.addEventListener('touchend', (e) => {
        e.preventDefault();
        e.stopPropagation();
        thumb.style.transform = '';
        console.log('Thumbnail touched:', index);
        switchToMedia(index);
      }, { passive: false });
    }
    
    // Keyboard accessibility
    thumb.addEventListener('keydown', (e) => {
      if (e.key === 'Enter' || e.key === ' ') {
        e.preventDefault();
        e.stopPropagation();
        console.log('Thumbnail key pressed:', index);
        switchToMedia(index);
      }
    });
  });
  
  // Handle variant changes from outside
  document.addEventListener('change', function(e) {
    if (e.target.name === 'id') {
      const selectedVariantId = e.target.value;
      const correspondingMediaId = variantMediaMap[selectedVariantId];
      
      console.log('Variant changed externally:', selectedVariantId, '->', correspondingMediaId);
      
      if (correspondingMediaId) {
        // Find media index
        const mediaIndex = Array.from(mainItems).findIndex(item => 
          item.getAttribute('data-media-id') === correspondingMediaId
        );
        
        if (mediaIndex !== -1 && mediaIndex !== currentIndex) {
          console.log('Switching gallery to media index:', mediaIndex);
          // Use setTimeout to avoid conflicts with current event
          setTimeout(() => {
            switchToMedia(mediaIndex, true); // Skip variant update to prevent loop
          }, 100);
        }
      }
    }
  });
  
  // Shopify variant change event
  document.addEventListener('variant:change', function(e) {
    if (e.detail && e.detail.variant && e.detail.source !== 'gallery') { // Only if not triggered by gallery
      const correspondingMediaId = variantMediaMap[e.detail.variant.id];
      
      console.log('Shopify variant change:', e.detail.variant.id, '->', correspondingMediaId);
      
      if (correspondingMediaId) {
        const mediaIndex = Array.from(mainItems).findIndex(item => 
          item.getAttribute('data-media-id') === correspondingMediaId
        );
        
        if (mediaIndex !== -1 && mediaIndex !== currentIndex) {
          console.log('Switching gallery via Shopify event to:', mediaIndex);
          // Use setTimeout to avoid conflicts
          setTimeout(() => {
            switchToMedia(mediaIndex, true); // Skip variant update to prevent loop
          }, 100);
        }
      }
    }
  });
  
  // Keyboard navigation
  document.addEventListener('keydown', function(e) {
    if (!gallery.contains(document.activeElement)) return;
    
    switch(e.key) {
      case 'ArrowLeft':
        e.preventDefault();
        switchToMedia(currentIndex > 0 ? currentIndex - 1 : mainItems.length - 1);
        break;
      case 'ArrowRight':
        e.preventDefault();
        switchToMedia(currentIndex < mainItems.length - 1 ? currentIndex + 1 : 0);
        break;
    }
  });
  
  // Initialize
  initVideoPreview();
  
  // Set initial variant sync
  const currentVariant = document.querySelector('input[name="id"]:checked, select[name="id"]');
  if (currentVariant) {
    const correspondingMediaId = variantMediaMap[currentVariant.value];
    if (correspondingMediaId) {
      const mediaIndex = Array.from(mainItems).findIndex(item => 
        item.getAttribute('data-media-id') === correspondingMediaId
      );
      if (mediaIndex !== -1) {
        switchToMedia(mediaIndex);
      }
    }
  }
  
  // Performance optimization: Intersection Observer for videos
  if ('IntersectionObserver' in window) {
    const videoObserver = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        const video = entry.target;
        if (!entry.isIntersecting && video.tagName === 'VIDEO') {
          video.pause();
        }
      });
    }, { threshold: 0.5 });
    
    gallery.querySelectorAll('video').forEach(video => {
      videoObserver.observe(video);
    });
  }
});
</script> 